### Preceptor

Clean up tutorial 9.

Finish Temperance in template_tutorial.

Delete gtsummary everywhere.

Delete katex and broom.helpers from imports?

Determine use of easystats::check_predictions().

Still not clear how to handle discussion/dismisal of hypothesis tests.

What does the Preceptor Table look like for dice and then for beads?

For dice, we have one row for each die and each point in time at which we might roll that die. If the Preceptor Table were filled in, we could answer any question because we would know that Die 1 rolled a 3, Die 2 a 4, and so on.

For beads, we have one row for each shovel result (8 reds or 6 reds or whatever) at each point in time. Again, if we had all the missing rows filled in, we could answer any question. 

I guess that you could do one row for each empty space in the shovel . . . Maybe there is a useful discuss to be had about it depending on what you care about. If your unit of analysis is the student, then you care about the test score for each student in a class. If the unit is the class, then maybe you only care about the average of the class as a whole.

Could be useful to use these simple examples to hammer home the theme of the DGM. We can create and use a DGM without doing any inference!

1) Talk about probability family. 2) Talk about link function. 3) LaTeX with parameters and error term. 4) LaTeX math with parameter values and no error term. 5) Verbal description of the model.

remove equatiomatic from all tutorials 1 through 5.

remove equatiomatic from all tutorial 6.

remove equatiomatic from all tutorial 7.

remove equatiomatic from all tutorial 8.

remove equatiomatic from all tutorial 9.

remove equatiomatic from all tutorial 11+.

remove equatiomatic everywhere.

Update template_tutorial.Rmd. Get rid of DK stuff.

Review Courage/Temperance in tutorial 6.

"We model units, but only we really care about aggregates." belongs as a knowledge drop.  -->

Deal with the word "render" in template_tutorial.Rmd. `Cmd/Ctrl + Shift + K` now runs Quarto preview, not Quarto render . . .

Edit RCM tutorial to remove all the make work.

Edit Probability tutorial to remove all the make work.

Finish Tests section of Cardinal Virtues vignette.

Remove equatiomatic from everything. If we can't use it everywhere, then we use it nowhere. Instead, ask students to use AI to describe their model in words and/or translate the model into LaTeX code which can be inserted into a Quarto document. 

Add more material to RCM tutorials. Like give a couple of new examples and then go through all the steps for each of them.

### Madhavan

* Complete Tutorial 111. 

* Read: https://marginaleffects.com/chapters/categorical.html

Central issue: Why can't we identify which dots correspond to which responses when we have an ordinal model in marginaleffects?

### Khang

Complete the first nine chapters of tutorials in https://github.com/PPBDS/tidymodels.tutorials. Email me the answers.

Optional: Read first nine chapters https://www.tmwr.org/. Go fast if you have seen this
material before. 

Choose a dataset which might be fun to use.

Make a new tutorial 151. New directory. Use the template. 

Start by making model. What kind? Flexible.
  

### Satvika

make tutorial 141. New directory. Copy over template. 

Choose a dataset which might be fun to use. See list below.

Try fitting a random forest model.

Try using marginaleffects functions on the fitted model.

### Exploration Projects

Original idea for this comes from Jade. Key points:

* Ultimate standard for success of the course is the quality of student final projects. So, the more time that students practice making final projects, the better.

* We want students to have a professional portfolio. These projects can, perhaps with some more work, serve as starter elements of that portfolio.

* Students vary in terms of their talent and willingness to work hard. Exploration Projects provide an opportunity for skilled and diligent students to push themselves.

* Projects start with standard construction of a website, so require that students have completed the two Quarto websites tutorial. 

* We encourage the use of AI extensively. Indeed, a primary purpose of these projects is to force students to make greater use of AI tools. There is no more important skill to teach them.

* All the resulting URLs are gathered and shared with the class as a whole, with the best results highlighted.

* We specify the data that should be used for the plot, at least for the first few tutorials. Perhaps the naming convention is EP: Diamnds, EP: Crime, and so on --- where "EP" stands for Exploration Project and the name of the dataset to use follows the colon.

* Ideally, we might connect these projects to cool-looking professional work. That is, we find a nice looking New York Times data project, with some public data, and then encourage students to make something which looks just as good if not better.

### Other Issues

Tutorial 9, which is a total mess.

Tutorial 10, less a mess.

### Possible Data Sets to Use for New Tutorials

These are all chosen to have thousands of observations and scores of variables, thereby 
allowing for machine learning models.

Source: https://vincentarelbundock.github.io/Rdatasets/articles/data.html

https://vincentarelbundock.github.io/Rdatasets/doc/openintro/labor_market_discrimination.html

https://vincentarelbundock.github.io/Rdatasets/doc/openintro/hfi.html

https://vincentarelbundock.github.io/Rdatasets/doc/ISLR/Caravan.html

https://vincentarelbundock.github.io/Rdatasets/doc/modeldata/ames.html

https://vincentarelbundock.github.io/Rdatasets/doc/Ecdat/Car.html

https://vincentarelbundock.github.io/Rdatasets/doc/AER/STAR.html

https://vincentarelbundock.github.io/Rdatasets/doc/sampleSelection/RandHIE.html

https://vincentarelbundock.github.io/Rdatasets/doc/modeldata/deliveries.html

https://vincentarelbundock.github.io/Rdatasets/doc/modeldata/hotel_rates.html

### Other Data Sets

Stereotype threat replication: https://osf.io/preprints/psyarxiv/qctkp

### Projects

#### extract_eq() problem in Tutorial 111

Really annoying that extract_eq() does not work inside of tutorial 111, meaning that it does not work in exercise code chunks for students and it does not work when we use it in a code chunk in the Rmd itself. Seems to be a problem with MASS:polr objects. Tried to create a simple replication and was not able to. But you can see the problem with the fit_approval as in tutorial 111. My guess is that this has something to do with gtsummary. At least, I don't think we had this problem before using gtsummary. Or maybe it is something weird with broom/broom.helpers, which both have a weird relationship with gtsummary. Note how we have to put broom.helpers in the Imports in the DESCRIPTION file, for no good reason. Note, also, that everything works fine in a qmd file, or even a simple Rmd file, but not in a "runtime: shiny_prerendered" file, I think. I am also suspicious of the two different versions of tidy() which float around, one in the broom package and one in the generics (??) package.

If/when we want to fix this, then we need to start by making the simplest possible reprex. My guess is that this needs to be a "runtime: shiny_prerendered" file which creates a MASS::polr object and then tries to run extract_eq() on it.


#### similar problems with plot_predictions

plot_predictions(,,,, draw = FALSE) working fine interactively with a MASS:polr object but failing to refit the Hession when run in a tutorial.




#### Other Items

ordinal package is being maintained, which is nice.

More new tutorials.

Would modelsummary be better than making tables with gt? Maybe that would make understanding dummy variables easier, because the table would automatically show the dummy variables as levels?

Need to add tidy() back to 4, 6, 8, 9 and 11.

extract_eq(lr, wrap = TRUE, show_distribution = TRUE)

Get MASS::polr() objects to work with equatiomatic.

Need to figure out how to explain that extract_eq on logistic_reg objects gives you the log-odds formulation.

Should we put the final image at the start of each tutorial, in the Introduction? Might it be interesting or motivating for students? Or a waste of time?

Change tutorial 11 to use different base model. Update it to new template.



### Projects to Consider




* Figure out pp_check() replacement.

* A new tutorial in primer.tutorials which just shows students how to find cool variables from the Census. The causal effect of the tutorial should be to make students more likely to use Census data for their projects.

* Consider switching categorical to multinomial and Bernoulli to binomial.

* Update 4 parameters so it does not produce these warning messages by default: https://rpubs.com/lelasengupta/four-parameters

* Explore gradetools: https://federicazoe.github.io/gradetools/index.html

* Deal with katex. Seems like all (?) Windows users are getting an error about needing the katex package. But nothing for Mac users. So, I added katex as an import, which is an absurd hack. Better approach?



* Make the Primer better and more connected to the tutorials. (This might be something that everyone ends up working on.) 

* I hope to have hundreds of students next summer. I need to work on tools now for managing that. See PraireLearn, Moodle, Google sheets and so on. 

  + 1) Where should students upload files? We currently use Google forms which puts stuff in a Google drive folder. This works pretty well! But I need to download the resulting folder by hand, which is no good. Surely, we can automate this. But can we automate it for all TFs. (We want TFs to be able to see and analyze the homeworks submitted by their students.) A second option would be DropBox. Others?
  
  + 2) Where do we keep track of the students in the class and key information associated with them? That information would be name, email, TF, breakout room, presentation room. Maybe only me and the head TFs need to edit it. I think that this might just be a Google sheet. We would want all staff to be able to access it since doing so would provide the info to allow scripts to just return a given TF's students' work.
  
  + 3) Where do we populate information about work completed? That is, we want to be able to report who has submitted each homework, perhaps also with the number of answers. We need to put that information somewhere, update it with scripts, and then allow TFs to be able to access it. 
  
  + 4) As a one-off, it would be nice to allow staff to say: Give me all the answers to this question for my students. Or for me to say the same about all students. Most common is to gather all the URL locations for student work. Even cooler would be to automatically open up a tab for each, with the tab given the name of the student.


* Animation. Use the DGM to create one complete Preceptor Table. In that draw, Joe is a 6 for `att_end`. Then, do another draw. Joe is a 5. Do a thousand draws. You then have a thousand Preceptor Tables. Calculate the Quantity of Interest for each Preceptor Table. The 1,000 values are the posterior for your QoI. Would be great to make a cool animation of this, perhaps with a simple example. Would be fun to have a similar animation for each chapter. Great summer project!


## Other Stuff


Include somewhere:

There will often be several tutorials associated with a given chapter. The first is an "Overview" tutorial which follows closely along with the words and examples in the chapter itself. Someday, we will [put those exercises directly](https://github.com/tinystats/teacups-giraffes-and-statistics) into the *Primer* itself, so keeping the two in sync makes sense. We can group other tutorials into three broad categories. First, some tutorials go into more detail about certain aspects of the chapter. Second, some tutorials provide further examples/extensions of the main theme of the chapter as a whole. Third, the remaining tutorials cover a topic --- like Quarto Websites or Tables --- which has no necessary connection to the chapter itself.

Should we do more with branching? How? Where?

## To-Do


Check out PraireLearn. Looks really cool!

Advanced: Get Format Code Chunk Labels add-in to catch the case in which a non-question code chunk is duplicated.


## Later

r-universe for making primer.tutorials easier to install.

Maybe r2u is as good or better than caching. https://eddelbuettel.github.io/r2u/

https://github.com/eddelbuettel/r2u/blob/master/inst/scripts/add_cranapt_jammy.sh

https://github.com/eddelbuettel/tidycpp/blob/master/.github/workflows/ci.yaml

https://community.rstudio.com/t/output-directory-in-quarto-cli-not-respected/143762/3

We should ensure that everything which can be tested is tested. For example, anytime we tell students to run X in the Console, we should silently run X as well, just to make sure it works. Failure to do so caused a bug when we told students to run `ggx:gghelp("Turn text 90 degrees")` which caused an error because there was only 1 colon in the command. There needs to be two colons. We especially need this testing in tutorials like RStudio and Code/Github because there are so many commands we require students to issue.


* Automating tutorial workflow? Interested in connecting R with Google tools.


## Other stuff


### Visualization Links

These are handy links and ideas for the tutorials, mainly in week 1 and 2, which make plots. Many of the current plots are not that impressive.

http://r-statistics.co/Top50-Ggplot2-Visualizations-MasterList-R-Code.html
https://cran.r-project.org/web/packages/ggside/vignettes/ggside_basic_usage.html

https://ggplot2.tidyverse.org/articles/

[A Gentle Guide to the Grammar of Graphics](https://pkg.garrickadenbuie.com/gentle-ggplot2) or https://moderndive.com/2-viz.html#grammarofgraphics

Tidy Tuesday: https://github.com/rfordatascience/tidytuesday

gghighlights, ggsides, ggrepel



## Chapter 5 and Associated Tutorials

* Discuss tutorial which would simulate the NCAA basketball tournament. What are the odds of a 5th seed winning the whole thing? Follow the 538 approach of just simulating the whole tournament a lot. Or maybe something similar but simpler?

* Discuss simulating craps. Win with 7 or 11. Lose with 2, 3, or 12. Then roll until you make your "point" and win or "crap out" by rolling  a 7.

* Review new notation in chapter.

* Give the formula for the coin and President and height examples. The mathematical distribution is one, by definition, with a formula.


Notes on Permutation Tests

* Use "There is only one test" as one of the knowledge drops, perhaps in multiple parts. Include the graphic and link to the original. http://allendowney.blogspot.com/2016/06/there-is-still-only-one-test.html

* Work through the entire simple example with N = 5. That makes things simple. Then, we do a second example, perhaps using something from primer.data, or from elsewhere. This is the approach we are currently following.

### Tutorials to add

Let's discuss the six broad categories of tutorials which we might add, especially to chapters 5 through 11.

First, we can just do more examples. Use different data with a different question, but all the same steps as in the chapter itself. Such examples will generally, like 082, do two analyses: one with all the data (to show the truth) and one in which representativeness fails in a way which we define, thereby showing how we can be led astray. Last step is to compare the answers from these two approaches, thus emphasizing the importance of humility.

Second, stand-alone tutorials on useful topics, like text modeling or networks or rtweet or whatever. These could go in any chapter and would not be restricted to having X number of parameters.

Third, we could cover many other model families, again perhaps not worrying too much about whether or not they have the "right" number of parameters. Simplest here would be other stan_glm families. That is, show a weird data set in which the outcome variable is something that should be fit with poisson or something, and then use family = poisson. Goal would be to emphasize that there are many possible models.

Fourth, expanding on the above, we might have some machine learning examples. After all, a machine-learning model is just a different kind of black box, not different conceptually than a linear or logistic model. We could fit a machine learning model on chapter 8 scenarios. Even though there are way more than three parameters in such models, they still can (I think!) be made to work in cases with just one input variable.

Fifth, real world data science examples which do not hide the messy complexity of the world. I guess that these would be a lot like the overview tutorials, but with 30 minutes of data cleaning first. These might also explicitly assume that you have done all the other tutorials in the chapter and that, therefore, we do not need to walk you through how to estimate a stan_glm() with five baby questions. Instead, the questions would be, not really harder, but messier.

Sixth, tutorials about interpreting parameters. We could have one of these in every chapter from 6 onward. These could be short! They would only cover parameter interpretation, perhaps only using the models which were used in the chapter. Or maybe a single big tutorial, for doing around chapter 10 or 11, which would cover all the messy details of interpreting parameters and also explaining why we should not spend much time on it.

Obviously, we could also combine these in various ways. Upon reflction, we should save the machine learning examples for later chapters in which we have several righhand side variables. Indeed, we could have three machine learning tutorials in chapter 11.

* Compare results from rstanarm model to an approach, like we learned in Chapter 5, in which we do the analysis "by hand," creating the joint distribution and then the posterior distribution. This is easiest to do for Chapter 6. Indeed, you can just take the code from Chapter 5, make it continuous by sampling lots of possible values, and then compare to rstanarm. Should work fine. More ambitiously, we could do this for Chapter 7. This requires a three dimensional joint distribution because there are two unknown parameters and then a two dimensional posterior, with one dimension for mu and one for sigma. This is cool! But perhaps over kill.

* Expand the Getting Started tutorial and make it better connected to the Primer chapter. Students read the chapter and then do the tutorial. The tutorial ought to confirm that they have done everything that the chapter told them to do. Even though it is done in class, it could be a bit longer, so 10 or 15 questions.


* A "models" which would be a full dry run of their final projects. Download some data (maybe lots of little data files) with an R script. Clean the data in other R script. Make the model (a simple two parameter model) in another R script. Then, make a quarto website which uses the model to make pretty pictures which answer a couple of questions. Should show results using gtsummary to make pretty tables of model results. Might even show how stan_glm() models differ from lm() models. Or maybe run stan_glm() with option to get the lm() results. Example usage: https://ipums.github.io/pma-data-hub/posts/2021-07-01-covid-tables/

* Advanced plotting, ideally focussed on all a variety of different plotting approaches designed for modeling-type questions and answers. Maybe https://feddelegrand7.github.io/ddplot/.

* Would it be possible to have tutorials in the last few weeks which were, more or less, final project check-ins . . .

* A tutorial about working with textual data. Perhaps based on tidytext book. Also: https://datavizs21.classes.andrewheiss.com/example/13-example/

* Regression to the mean

* The garden of forking paths

* M/S errors


* An rtweet tutorial: https://github.com/ropensci/rtweet

* A Python tutorial. See the new features in learnr: "Added a new polyglot tutorial to learnr. This tutorial displays mixing R, python, and sql exercises. See run_tutorial("polyglot", "learnr") for a an example. (#397)"


### To discuss

* Another example set: https://openintrostat.github.io/ims-tutorials/

* Specify which versions of learnr (and other Github packages?) we want. Otherwise, you always get the head, which may not be desirable. Do we really still need to be using the development version of learnr? That makes me nervous! And why haven't they updated the version on CRAN for more than 15 months?

* Best single summary of tutorial tools/approaches: https://damien-datasci-blog.netlify.app/post/how-to-make-an-interactive-tutorial-to-teach-r-an-overview/


* Another way to host the tutorials: https://higgi13425.github.io/medical_r/posts/2020-12-27-creating-mini-learnr-apps-and-hosting-on-a-server/


* mention iter = 10000

### To explore later

* Powerful approach for hosting cool looking tutorials: https://github.com/ines/course-starter-r. One example of a tutorial using this approach:  https://github.com/noamross/gams-in-r-course

* Should our tutorials look more like this one? https://minecr.shinyapps.io/dsbox-05-moneyinpolitics/. I don't think so. Too many words, not enough typing.

* Explore the use of setup chunks that are referenced by name, rather than requiring that the code chunk names match up. Example: exercise.setup = "setupA"

* Put the number of exercises in the group header so that students know how long? Or maybe put in in the exercise header in exercise 5, 10 and so on.

* Can we give students a search box in the tutorial so that they can find answers to questions they have already done?


* Interesting discussion and some plausible claims: http://laderast.github.io/2020/09/15/getting-learnr-tutorials-to-run-on-mybinder-org/. Claims that "the .Rmd file containing the tutorial should be named the same as the directory it is in." But why?

* https://github.com/karthik/holepunch is interesting. But it also hasn't been updated in more than 7 months.

## Videos Worth Looking At?

Data Science Mini Projects: https://www.youtube.com/playlist?list=PLpdmBGJ6ELUJM6_vKQbpi9vGc65Sn0uPr
Draw Multiple Time Series in Same Plot: https://www.youtube.com/watch?v=FNXnJ_zT1gE
Barplot in R: https://www.youtube.com/watch?v=pYbuWU77QkU&feature=youtu.be

# Interestin approach for next summer

## Material from JSM 2021

Education section: https://matackett.github.io/open-stat-ds-ed/

Interesting discussion of using art to bring students into data science.

Consider the use of ggirl package for encouraging students to send someone an actual postcard.

### Later tutorials in later chapters

The first tutorial for each of the later chapters is easy. Just do more or less exactly what the chapter does. Recall that, one day, we expect to incorporate those questions directly into the chapter itself. So, the more that it just forces students to type in the same commands as in the chapter, the better. But, for the most part, the chapters are not that long! There is only about one tutorial worth of material.

What do we do for the other 5 or so tutorials for each chapter? Good question! Honestly, I am not sure. Here are some ideas:

* The second tutorial could be very similar to the first -- and, therefore, to the chapter. Just use a different variable(s) and/or a different tibble, but answer the same sorts of questions in the same way.

* Don't be repetitive in the written questions. It is fine, in the first tutorial for each chapter, to ask students to write a definition of the Preceptor Table. Indeed, we should always have that question in each first tutorial. But, we don't want that question in each of the 5 tutorials for a single chapter.

* Use written questions which do require different answers depending in the data/variable used. We can't resuse "Define a Preceptor Table" because that question has the same answer every time. Consider a different question:

> Write a paragraph which explores reasons why we should **not** consider the Preceptor Table and our data set as being drawn from the same population?

That is a good question, not least because it needs a different answer for each data science problem we confront. Another good example:

> Write a paragraph explaining why, even though the data is not a random sample, we may still consider it to be "respsentative" enough to move forward?

Again, this requires a different answer for each new tibble.

* We don't usually (ever?) ask questions about the four Cardinal Virtues directly. They are simply a pedagogical device we use to help students organize their work. But we do ask written questions about the key concepts (population, representativeness, validity) in each and every tutorial. These are difficult concepts with no "right" answers. We need to wrestle with them every week.

* A tutorial after the first might do a very similar exercise but with three differences. First, it can go faster, given that students have already seen the basics fairly slowly in the first tutorial. Second, it can add some complexity, make the modeling problem just a little more difficult than the basic case. Third, it can add some new magic. Perhaps it grabs data using a new package instead of just using another boring data set from **primer.data**. Perhaps it creates a nicer plot with some geoms we have not used before.

* If the main example is the chapter is one which uses a linear model, then tutorial 2 could use a logistic model and then tutorial 3 could use the third kind of model (which we have not chosen yet). Similarly, if the chapter (and first tutorial) does a predictive mode, then tutorial 3 should do a causal model.


* Another type of tutorial is one which uses fake data which has been manipulated to violate the assumptions which students are making. Show them Preceptor's Posterior and compare it to their own.

* Seems like you can't include LaTeX math in a R exercise message. Generates an error under R CMD check. Example of something which fails:

Add the formula to `model.qmd`, `$$ biden_i =  \mu + \epsilon_i $$`. `Command/Ctrl + Shift + K`. Ensure that the formula is looks correct. 

<!-- # ```{r courage-12} -->
<!-- # question_text(NULL, -->
<!-- # 	message = "$$ biden_i =  \mu + \epsilon_i $$", -->
<!-- # 	answer(NULL, correct = TRUE), -->
<!-- # 	allow_retry = FALSE, -->
<!-- # 	incorrect = NULL, -->
<!-- # 	rows = 6) -->
<!-- # ``` -->
