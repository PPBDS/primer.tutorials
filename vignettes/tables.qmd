---
title: "Preceptor and Population Tables"
author: "David Kane and Aashna Patel"
date: "`r Sys.Date()`"
format: html
execute: 
  echo: false
vignette: >
  %\VignetteIndexEntry{Preceptor and Population Tables}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---

## Overview

This vignette introduces the `make_p_tables()` function in the `primer.tutorials` package, which inserts a five-chunk Quarto-ready template into your open document for creating **Preceptor Tables** and **Population Tables**.

These tables are designed to support both **causal** and **predictive** modeling workflows by clearly labeling variables with spanners and encouraging detailed documentation via footnotes.

## What Are Preceptor and Population Tables?

**Preceptor Tables** and **Population Tables** help represent structured information about observational units, treatment status, potential or predicted outcomes, and covariates in a standardized format. They are especially useful in modeling workflows, particularly in education or social science contexts where modeling assumptions must be made transparent.

This format draws inspiration from the [Cardinal Virtues](https://ppbds.github.io/primer.tutorials/articles/cardinal_virtues.html#preceptor-table) article, and aims to make tables interpretable in isolation by including both clear labeling and explanatory footnotes.

### Preceptor Table

A **Preceptor Table** contains hypothetical or expected outcomes for units (such as students or senators). It often includes unknowns (denoted by `"?"`) where real data is not yet available, and reflects researcher or instructor expectations.

### Population Table

A **Population Table** contains a merged view of observed data (from the population) alongside preceptor-defined expectations. It includes an additional column `Source` that distinguishes between actual data (`"Data"`) and expectations (`"Preceptor Table"`).

## Key Features

The output of `make_p_tables()` includes:

* An empty `tibble` for the **Preceptor Table**
* An empty `tibble` for the **Population Table** (which includes rows from the Preceptor Table)
* `gt` code to render both tables with grouped column headers ("spanners")
* Editable footnotes for each section of the table
* Cleanup code to remove temporary objects

## Spanner Structure

Each table includes spanners for:

* **Unit** (or **Unit/Time** in the Population Table)
* **Outcome** (for predictive models) or **Potential Outcomes** (for causal models)
* **Treatment** (included only in causal models)
* **Covariates** (typically 3 columns, customizable)

> **Note:** All table entries must be surrounded by **double quotes**, even for numeric values (e.g., `"42"`).

The goal is to visually communicate which variables play which roles in your modeling. Each spanner groups columns of a shared type. Footnotes help document the rationale and context for each set of variables.

## Package Requirements

It automatically constructs code using these libraries:

```{r}
#| message: FALSE
library(tidyverse)
library(primer.tutorials)
```

## Running `make_p_tables()`

Preceptor and Population Tables are inserted together. The Population Table includes a `"Source"` column as its first column, which takes values `"Data"` or `"Preceptor Table"` depending on origin. This structure encourages comparison between expected and observed values.

Behind the scenes, these tables are generated using `tibble::tribble()` for easier manual editing by row. This helps authors align values vertically and encourages clear visual structure in the Quarto document

When you run `primer.tutorials::make_p_tables()` without any argument values, the following error appears in the console.

````
> make_p_tables()
Error:
! Failed to evaluate glue component {covariate_1_label}
Caused by error:
! argument "covariate_1_label" is missing, with no default
Show Traceback
>
````

This is because the function requires labels to create a template of the tables. For the best results, it is encouraged to fill in each argument when calling the function.

## Understanding the Function Arguments

The `make_p_tables()` function takes a set of user-defined labels and options that control how the **Preceptor** and **Population** tables are built and displayed. Each argument serves a clear conceptual role and is used to populate column headers, spanner labels, and the default content in `tibble::tribble()` calls. Here is a detailed breakdown:

* We use the term "label" rather than "vars" to indicate that these are the labels in the table rather than the variable names from the data. As such, they are often human-readable phrases with spaces, like "Math Score if in Small Class". Will long labels be wrapped automagically? We probably want that. Of course, these descriptions can not be too long and so must be shortened in some way. In a pinch, the variable names may be used, but this is not preferred.

### `is_causal` *(Logical)*

* Set to `TRUE` to generate a causal table structure, which includes:

  * Two columns for **Potential Outcomes** (under treatment and control).
  * A **Treatment** column representing an intervention or assigned condition.
* Set to `FALSE` for a predictive model:

  * Includes a single **Outcome** column.
  * Omits the Treatment column entirely.
* This flag determines not only what variables appear in the tables, but also how they are **spanned** and **labeled** in the rendered `gt` tables.

---

### `unit_label` *(Character)*

* Human-readable name for the **unit of analysis** — e.g., `"Senator"`, `"Student"`, or `"School"`.
* This will appear both as a column name in the tibble and as part of the `"Unit"` or `"Unit/Time"` spanner in the `gt` table.
* The label should be capitalized and concise.

---

### `outcome_label` *(Character)*

* Describes the **key outcome** being predicted or causally modeled.
* In predictive mode, this creates one column: `Outcome`.
* In causal mode, this generates two: `{outcome_label} 1` and `{outcome_label} 2`, reflecting potential outcomes under treatment and control, respectively.
* Should be an interpretable phrase like `"Test Score"` or `"Re-election Status"`.

---

### `treatment_label` *(Character)*

* Only required if `is_causal = TRUE`.
* Appears as the label of the treatment column, such as `"Phone Call"` or `"Received Tutoring"`.
* Used to title the corresponding `gt::tab_spanner()`.

---

### `covariate_1_label` and `covariate_2_label`*(Characters)*

* Labels for two covariates relevant to the analysis.
* These are grouped under a `"Covariates"` spanner.
* These labels will be used directly as column headers (e.g., `"Sex"`, `"Age"`, `"School Type"`).
* All should be simple phrases, and together they describe the pre-treatment information on which comparisons or predictions may be based.

Each of these labels should be understood as **descriptive display names**, not as variable names from an existing dataset. The goal is clarity and interpretability for readers of the resulting Quarto document.

---

## Understanding the Footnotes

Footnotes in these tables are not decorative — they are an essential part of **documenting analytical intent**. When you use `make_p_tables()`, it generates editable placeholders for ten footnotes, five for each table. These can be filled in or deleted (by setting to `NULL`), and they appear in the rendered table using `gt::tab_footnote()`.

Below is a guide to what each footnote is for:

---

### Preceptor Table Footnotes

* **`pre_title_footnote`**: Explains the background or motivation for the expectations shown. Useful for describing who the preceptors are, when the expectations were made, or why these units were selected.

* **`pre_units_footnote`**: Clarifies the definition of a “unit” in this context — e.g., “Each row represents a senator during the 2022 election.” Also helpful to include time span or location info if applicable.

* **`pre_outcome_footnote`**: Documents why these potential outcomes are meaningful. May include a note on how they were estimated or what they signify (e.g., "Re-election status under treatment vs. control").

* **`pre_treatment_footnote`**: Defines what the treatment actually entails and how it is operationalized. For example, a phone call campaign, assignment to tutoring, or access to a program.

* **`pre_covariates_footnote`**: Explains why the selected covariates were chosen and their role in forming expectations. Should also clarify whether these differ between tables.

---

### Population Table Footnotes

* **`pop_title_footnote`**: Describes the purpose of the population table — usually to compare expected vs. observed outcomes, merged with preceptor rows.

* **`pop_units_footnote`**: Defines what each unit represents in the population — e.g., “Each row represents an observed student or a preceptor-generated scenario.”

* **`pop_outcome_footnote`**: Documents the source of outcome data. For example: “Outcomes observed from the 2022 voter file” or “Final grades from school records.”

* **`pop_treatment_footnote`**: Explains how actual treatment status was observed or inferred. May differ from the assumptions made in the Preceptor Table.

* **`pop_covariates_footnote`**: Describes where the covariate data comes from in the population table and whether it’s measured identically to the preceptor rows.

---

These footnotes ensure that **both the data structure and the logic of your modeling assumptions are transparent** to readers. They serve as a form of embedded documentation and can be styled or omitted as needed.

---


### Examples
When you run:

```r
make_p_tables(
  is_causal = TRUE,
  unit_label = "Senator",
  outcome_label = "Potential Outcomes",
  treatment_label = "Phone Call",
  covariate_1_label = "Sex",
  covariate_2_label = "Age"
)
```

The following chunks are inserted (after manually filling in the rest):

### 1. Installation + Footnotes

```{r}
pre_title_footnote <- "Expected outcomes for 2022 Senate elections based on expert judgment and historical data."
pre_units_footnote <- "Each row represents a single U.S. senator during the 2022 election cycle."
pre_outcome_footnote <- "Potential outcomes reflect election results with and without treatment (phone calls)."
pre_treatment_footnote <- "Treatment indicates whether targeted phone call campaigns were conducted."
pre_covariates_footnote <- "Covariates include demographic factors (Sex, Age) and incumbency status."

pop_title_footnote <- "Observed 2022 Senate election data merged with preceptor expectations."
pop_units_footnote <- "Each row represents an observed senator or a preceptor-defined expected case."
pop_outcome_footnote <- "Observed election results recorded after the 2022 election."
pop_treatment_footnote <- "Observed phone call campaign status from actual campaign data."
pop_covariates_footnote <- "Covariates drawn from voter file demographics and campaign records."
```

### 2. Preceptor Table

```{r}
# Use "?" for unknowns in Preceptor Table rows
p_tibble <- tibble::tribble(
  ~`Senator`, ~`Time/Year`, ~`Potential Outcomes 1`, ~`Potential Outcomes 2`, ~`Phone Call`, ~`Sex`, ~`Age`, ~`Other`,
 "John Smith",   "2025", "?", "Not Re-elected", "Yes", "Male", "58", "...",
  "Jane Doe",     "2025", "?", "Not Re-elected", "No",  "Female", "49", "...",
  "...", "...", "...", "...", "...", "...", "...", "...",
  "Chris Lee",    "2025", "Re-elected", "?", "No",  "Male", "55", "...",
  "...", "...", "...", "...", "...", "...", "...", "...",
)
```

### 3. Population Table (Includes Preceptor Rows)

```{r}
d_tibble <- tibble::tribble(
  ~`Source`, ~`Senator`, ~`Time/Year`, ~`Potential Outcomes 1`, ~`Potential Outcomes 2`, ~`Phone Call`, ~`Sex`, ~`Age`, ~`Other`,
  "...", "...", "...", "...", "...", "...", "...", "...", "...",
  "Data", "Mary Jackson",   "2021", "Re-elected", "---", "Yes", "Female", "51", "...",
  "Data", "Alex Johnson",     "2022", "---", "Not Re-elected", "Yes", "Male", "46", "...",
  "...", "...", "...", "...", "...", "...", "...", "...", "...",
  "Data", "Bobby Norris",    "2022", "Re-elected", "---", "No", "Male", "63", "...",
  "...", "...", "...", "...", "...", "...", "...", "...", "...",
  # Add Preceptor rows
  "Preceptor Table", "John Smith",   "2025", "?", "Not Re-elected", "Yes", "Male", "58", "...",
  "Preceptor Table", "Jane Doe",     "2025", "?", "Not Re-elected", "No",  "Female", "49", "...",
  "...", "...", "...", "...", "...", "...", "...", "...", "...",
  "Preceptor Table", "Chris Lee",    "2025", "Re-elected", "?", "No",  "Male", "55", "...",
  "...", "...", "...", "...", "...", "...", "...", "...", "..."
)
```

### 4. Rendering Tables

```{r}
# Preceptor Table
gt::gt(data = p_tibble) |>
  gt::tab_header(title = "Preceptor Table") |>
  gt::tab_spanner(label = "Unit/Time", id = "unit_span", columns = c(`Senator`, `Year`)) |>
  gt::tab_spanner(label = "Potential Outcomes", id = "outcome_span", columns = c(`Potential Outcomes 1`, `Potential Outcomes 2`)) |>
  gt::tab_spanner(label = "Treatment", id = "treatment_span", columns = c(`Phone Call`)) |>
  gt::tab_spanner(label = "Covariates", id = "covariates_span", columns = c(`Sex`, `Age`)) |>
  gt::cols_align("center", columns = gt::everything()) |>
  gt::cols_align("left", columns = `Senator`) |>
  gt::fmt_markdown(columns = gt::everything()) |>
  gt::tab_footnote(pre_title_footnote, locations = gt::cells_title("title")) |>
  gt::tab_footnote(pre_units_footnote, locations = gt::cells_column_spanners("unit_span")) |>
  gt::tab_footnote(pre_outcome_footnote, locations = gt::cells_column_spanners("outcome_span")) |>
  gt::tab_footnote(pre_treatment_footnote, locations = gt::cells_column_spanners("treatment_span")) |>
  gt::tab_footnote(pre_covariates_footnote, locations = gt::cells_column_spanners("covariates_span"))
```

```{r}
# Population Table
gt::gt(data = d_tibble) |>
  gt::tab_header(title = "Population Table") |>
  gt::tab_spanner(label = "Unit/Time", id = "unit_span", columns = c(`Senator`, `Time/Year`)) |>
  gt::tab_spanner(label = "Potential Outcomes", id = "outcome_span", columns = c(`Potential Outcomes 1`, `Potential Outcomes 2`)) |>
  gt::tab_spanner(label = "Phone Call", id = "treatment_span", columns = c(`Phone Call`)) |>
  gt::tab_spanner(label = "Covariates", id = "covariates_span", columns = c(`Sex`, `Age`)) |>
  gt::cols_align("center", columns = gt::everything()) |>
  gt::cols_align("left", columns = `Senator`) |>
  gt::fmt_markdown(columns = gt::everything()) |>
  gt::tab_footnote(pop_title_footnote, locations = gt::cells_title("title")) |>
  gt::tab_footnote(pop_units_footnote, locations = gt::cells_column_spanners("unit_span")) |>
  gt::tab_footnote(pop_outcome_footnote, locations = gt::cells_column_spanners("outcome_span")) |>
  gt::tab_footnote(pop_treatment_footnote, locations = gt::cells_column_spanners("treatment_span")) |>
  gt::tab_footnote(pop_covariates_footnote, locations = gt::cells_column_spanners("covariates_span"))
```

### 5. Cleanup

```{r}
rm(p_tibble, d_tibble)
```

---

## Summary

The `make_p_tables()` function simplifies the creation of interpretable, spanner-labeled tables for modeling workflows. It promotes clarity, transparency, and rigor by encouraging authors to:

* Replace placeholders with meaningful values
* Use `"?"` or `"---"` for unknowns in pre/post data
* Fill in footnotes with useful context
* Ensure every table entry is surrounded by double quotes

This workflow supports better modeling documentation and instructional design.

For more on how and why to use these tables, see:

* [The Cardinal Virtues](https://ppbds.github.io/primer.tutorials/articles/cardinal_virtues.html#preceptor-table) article from *primer.tutorials*


