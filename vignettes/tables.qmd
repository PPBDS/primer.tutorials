---
title: "Preceptor and Population Tables"
author: "David Kane and Aashna Patel"
date: "`r Sys.Date()`"
format: html
execute: 
  echo: false
vignette: >
  %\VignetteIndexEntry{Preceptor and Population Tables}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
---


And when you render that document, you will see:

---insert the results---

here is my fixed.


show it when rendered



## Overview

This vignette introduces the `make_p_tables()` function in the `primer.tutorials` package, which inserts a five-chunk Quarto-ready template into your open document for creating **Preceptor Tables** and **Population Tables**.

These tables are designed to support both **causal** and **predictive** modeling workflows by clearly labeling variables with spanners and encouraging detailed documentation via footnotes.

## What Are Preceptor and Population Tables?

**Preceptor Tables** and **Population Tables** help represent structured information about observational units, treatment status, potential or predicted outcomes, and covariates in a standardized format. They are especially useful in modeling workflows, particularly in education or social science contexts where modeling assumptions must be made transparent.

This format draws inspiration from the [Cardinal Virtues](https://ppbds.github.io/primer.tutorials/articles/cardinal_virtues.html#preceptor-table) article, and aims to make tables interpretable in isolation by including both clear labeling and explanatory footnotes.

### Preceptor Table

A **Preceptor Table** contains hypothetical or expected outcomes for units (such as students or senators). It often includes unknowns (denoted by `"?"`) where real data is not yet available, and reflects researcher or instructor expectations.

### Population Table

A **Population Table** contains a merged view of observed data (from the population) alongside preceptor-defined expectations. It includes an additional column `Source` that distinguishes between actual data (`"Data"`) and expectations (`"Preceptor Table"`).

## Key Features

The output of `make_p_tables()` includes:

* A `tibble` for the **Preceptor Table**
* A `tibble` for the **Population Table** (which includes rows from the Preceptor Table)
* `gt` code to render both tables with grouped column headers ("spanners")
* Editable footnotes for each section of the table
* Cleanup code to remove temporary objects

## Spanner Structure

Each table includes spanners for:

* **Unit** (or **Unit/Time** in the Population Table)
* **Outcome** (for predictive models) or **Potential Outcomes** (for causal models)
* **Treatment** (included only in causal models)
* **Covariates** (typically 3 columns, customizable)

> **Note:** All table entries must be surrounded by **double quotes**, even for numeric values (e.g., `"42"`).

## Package Requirements

This function depends on the following packages:

```r
install.packages(c("gt", "tibble", "glue"))
```

It automatically constructs code using these libraries:

```{r}
#| message: FALSE
library(tidyverse)
library(primer.tutorials)
```

## Running `make_p_tables()`

When you run `primer.tutorials::make_p_tables()`, the following code chunks are placed in the active document.

````{verbatim}
```{r}
# Edit the following PRECEPTOR/POPULATION footnotes (look at the help page for more details):
pre_title_footnote <- "..."
pre_units_footnote <- "..."
pre_outcome_footnote <- "..."
pre_treatment_footnote <- "..."
pre_covariates_footnote <- "..." 

pop_title_footnote <- "..."
pop_units_footnote <- "..."
pop_outcome_footnote <- "..."
pop_treatment_footnote <- "..."
pop_covariates_footnote <- "..."
```

```{r}
# Use "?" for unknowns in Preceptor Table rows, and "---" for unknowns in Population (data) rows.
# Leave the last row and column as-is to signal more rows exist
p_tibble <- tibble::tribble(
  ~`Unit`, ~`Time/Year`, ~`Potential Outcomes 1`, ~`Potential Outcomes 2`, ~`Treatment`, ~`sex`, ~`age`, ~`incumbent`, ~`More`,
  "...", "2020", "...", "...", "...", "...", "...", "...", "...",
  "...", "2020", "...", "...", "...", "...", "...", "...", "...",
  "...", "2020", "...", "...", "...", "...", "...", "...", "...",
  "...", "...", "...", "...", "...", "...", "...", "...", "..."
)
```

```{r}
d_tibble <- tibble::tribble(
  ~`Source`, ~`Unit`, ~`Time/Year`, ~`Potential Outcomes 1`, ~`Potential Outcomes 2`, ~`Treatment`, ~`sex`, ~`age`, ~`incumbent`, ~`More`,
  "...", "...", "...", "...", "...", "...", "...", "...", "...", "...",
  "Data", "...", "...", "...", "...", "...", "...", "...", "...", "...",
  "Data", "...", "...", "...", "...", "...", "...", "...", "...", "...",
  "Data", "...", "...", "...", "...", "...", "...", "...", "...", "...",
  "Data", "...", "...", "...", "...", "...", "...", "...", "...", "...",
  "...", "...", "...", "...", "...", "...", "...", "...", "...", "...",
  # Reuse preceptor rows from p_tibble
  "Preceptor Table", !!!p_tibble[1, ] |> dplyr::as_tibble() |> dplyr::slice(1) |> unname() |> as.list(),
  "Preceptor Table", !!!p_tibble[2, ] |> dplyr::as_tibble() |> dplyr::slice(1) |> unname() |> as.list(),
  "Preceptor Table", !!!p_tibble[3, ] |> dplyr::as_tibble() |> dplyr::slice(1) |> unname() |> as.list(),
  "Preceptor Table", !!!p_tibble[4, ] |> dplyr::as_tibble() |> dplyr::slice(1) |> unname() |> as.list(),
  "...", "...", "...", "...", "...", "...", "...", "...", "...", "..."
)
```

```{r}
gt::gt(data = p_tibble) |>
  gt::tab_header(title = "Preceptor Table") |>
  gt::tab_spanner(label = "Unit", id = "unit_span", columns = c(`Unit`, `Time/Year`)) |>
  gt::tab_spanner(label = "Potential Outcomes", id = "outcome_span", columns = c(`Potential Outcomes 1`, `Potential Outcomes 2`)) |>
  gt::tab_spanner(label = "Treatment", id = "treatment_span", columns = c(`Treatment`)) |>
  gt::tab_spanner(label = "Covariates", id = "covariates_span", columns = c(`sex`, `age`, `incumbent`)) |>
  gt::cols_align(align = "center", columns = gt::everything()) |>
  gt::cols_align(align = "left", columns = c(`Unit`)) |>
  gt::fmt_markdown(columns = gt::everything()) |>
  gt::tab_footnote(pre_title_footnote, locations = gt::cells_title("title")) |>
  gt::tab_footnote(pre_units_footnote, locations = gt::cells_column_spanners(spanners = "unit_span")) |>
  gt::tab_footnote(pre_outcome_footnote, locations = gt::cells_column_spanners(spanners = "outcome_span")) |>
  gt::tab_footnote(pre_treatment_footnote, locations = gt::cells_column_spanners(spanners = "treatment_span")) |>
  gt::tab_footnote(pre_covariates_footnote, locations = gt::cells_column_spanners(spanners = "covariates_span"))
```

```{r}
gt::gt(data = d_tibble) |>
  gt::tab_header(title = "Population Table") |>
  gt::tab_spanner(label = "Unit/Time", id = "unit_span", columns = c(`Unit`, `Time/Year`)) |>
  gt::tab_spanner(label = "Potential Outcomes", id = "outcome_span", columns = c(`Potential Outcomes 1`, `Potential Outcomes 2`)) |>
  gt::tab_spanner(label = "Treatment", id = "treatment_span", columns = c(`Treatment`)) |>
  gt::tab_spanner(label = "Covariates", id = "covariates_span", columns = c(`sex`, `age`, `incumbent`)) |>
  gt::cols_align(align = "center", columns = gt::everything()) |>
  gt::cols_align(align = "left", columns = c(`Unit`)) |>
  gt::fmt_markdown(columns = gt::everything()) |>
  gt::tab_footnote(pop_title_footnote, locations = gt::cells_title("title")) |>
  gt::tab_footnote(pop_units_footnote, locations = gt::cells_column_spanners(spanners = "unit_span")) |>
  gt::tab_footnote(pop_outcome_footnote, locations = gt::cells_column_spanners(spanners = "outcome_span")) |>
  gt::tab_footnote(pop_treatment_footnote, locations = gt::cells_column_spanners(spanners = "treatment_span")) |>
  gt::tab_footnote(pop_covariates_footnote, locations = gt::cells_column_spanners(spanners = "covariates_span"))
```

```{r}
rm(p_tibble, d_tibble)
```
````

When you run:

```r
make_p_tables(
  is_causal = TRUE,
  unit_label = "Senator",
  outcome_label = "Potential Outcomes",
  treatment_label = "Phone Call",
  covariate_1_label = "Sex",
  covariate_2_label = "Age",
  covariate_3_label = "Incumbency",
  pre_time = "2022"
)
```

The following chunks are inserted (after manually filling in the rest):

### 1. Installation + Footnotes

```{r}
pre_title_footnote <- "Expected outcomes for 2022 Senate elections based on expert judgment and historical data."
pre_units_footnote <- "Each row represents a single U.S. senator during the 2022 election cycle."
pre_outcome_footnote <- "Potential outcomes reflect election results with and without treatment (phone calls)."
pre_treatment_footnote <- "Treatment indicates whether targeted phone call campaigns were conducted."
pre_covariates_footnote <- "Covariates include demographic factors (Sex, Age) and incumbency status."

pop_title_footnote <- "Observed 2022 Senate election data merged with preceptor expectations."
pop_units_footnote <- "Each row represents an observed senator or a preceptor-defined expected case."
pop_outcome_footnote <- "Observed election results recorded after the 2022 election."
pop_treatment_footnote <- "Observed phone call campaign status from actual campaign data."
pop_covariates_footnote <- "Covariates drawn from voter file demographics and campaign records."
```

### 2. Preceptor Table

```{r}
# Use "?" for unknowns in Preceptor Table rows
p_tibble <- tibble::tribble(
  ~`Senator`, ~`Time/Year`, ~`Potential Outcomes 1`, ~`Potential Outcomes 2`, ~`Phone Call`, ~`Sex`, ~`Age`, ~`Incumbency`, ~`Other`,
  "John Smith",   "2022", "?", "Not Re-elected", "Yes", "Male", "58", "Incumbent", "...",
  "Jane Doe",     "2022", "?", "Not Re-elected", "No",  "Female", "49", "Challenger", "...",
  "Alex Johnson", "2022", "Re-elected", "?", "Yes", "Male", "62", "Incumbent", "...",
  "Chris Lee",    "2022", "?", "Not Re-elected", "No",  "Female", "55", "Incumbent", "...",
  "...", "...", "...", "...", "...", "...", "...", "...", "..."
)
```

### 3. Population Table (Includes Preceptor Rows)

```{r}
d_tibble <- tibble::tribble(
  ~`Source`, ~`Senator`, ~`Time/Year`, ~`Potential Outcomes 1`, ~`Potential Outcomes 2`, ~`Phone Call`, ~`Sex`, ~`Age`, ~`Incumbency`, ~`Other`,
  "...", "...", "...", "...", "...", "...", "...", "...", "...", "...",
  "Data", "John Smith",   "2022", "Re-elected", "---", "Yes", "Male", "58", "Incumbent", "...",
  "Data", "Jane Doe",     "2022", "---", "Re-elected", "No", "Female", "49", "Challenger", "...",
  "Data", "Alex Johnson", "2022", "---", "Not Re-elected", "Yes", "Male", "62", "Incumbent", "...",
  "Data", "Chris Lee",    "2022", "Re-elected", "---", "No", "Female", "55", "Incumbent", "...",
  "...", "...", "...", "...", "...", "...", "...", "...", "...", "...",
  # Add Preceptor rows
  "Preceptor Table", "John Smith",   "2022", "?", "Not Re-elected", "Yes", "Male", "58", "Incumbent", "...",
  "Preceptor Table", "Jane Doe",     "2022", "?", "Not Re-elected", "No",  "Female", "49", "Challenger", "...",
  "Preceptor Table", "Alex Johnson", "2022", "Re-elected", "?", "Yes", "Male", "62", "Incumbent", "...",
  "Preceptor Table", "Chris Lee",    "2022", "?", "Not Re-elected", "No",  "Female", "55", "Incumbent", "...",
  "...", "...", "...", "...", "...", "...", "...", "...", "...", "..."
)
```

### 4. Rendering Tables

```{r}
# Preceptor Table
gt::gt(data = p_tibble) |>
  gt::tab_header(title = "Preceptor Table") |>
  gt::tab_spanner(label = "Senator", id = "unit_span", columns = c(`Senator`, `Time/Year`)) |>
  gt::tab_spanner(label = "Potential Outcomes", id = "outcome_span", columns = c(`Potential Outcomes 1`, `Potential Outcomes 2`)) |>
  gt::tab_spanner(label = "Phone Call", id = "treatment_span", columns = c(`Phone Call`)) |>
  gt::tab_spanner(label = "Covariates", id = "covariates_span", columns = c(`Sex`, `Age`, `Incumbency`)) |>
  gt::cols_align("center", columns = gt::everything()) |>
  gt::cols_align("left", columns = `Senator`) |>
  gt::fmt_markdown(columns = gt::everything()) |>
  gt::tab_footnote(pre_title_footnote, locations = gt::cells_title("title")) |>
  gt::tab_footnote(pre_units_footnote, locations = gt::cells_column_spanners("unit_span")) |>
  gt::tab_footnote(pre_outcome_footnote, locations = gt::cells_column_spanners("outcome_span")) |>
  gt::tab_footnote(pre_treatment_footnote, locations = gt::cells_column_spanners("treatment_span")) |>
  gt::tab_footnote(pre_covariates_footnote, locations = gt::cells_column_spanners("covariates_span"))
```

```{r}
# Population Table
gt::gt(data = d_tibble) |>
  gt::tab_header(title = "Population Table") |>
  gt::tab_spanner(label = "Unit/Time", id = "unit_span", columns = c(`Senator`, `Time/Year`)) |>
  gt::tab_spanner(label = "Potential Outcomes", id = "outcome_span", columns = c(`Potential Outcomes 1`, `Potential Outcomes 2`)) |>
  gt::tab_spanner(label = "Phone Call", id = "treatment_span", columns = c(`Phone Call`)) |>
  gt::tab_spanner(label = "Covariates", id = "covariates_span", columns = c(`Sex`, `Age`, `Incumbency`)) |>
  gt::cols_align("center", columns = gt::everything()) |>
  gt::cols_align("left", columns = `Senator`) |>
  gt::fmt_markdown(columns = gt::everything()) |>
  gt::tab_footnote(pop_title_footnote, locations = gt::cells_title("title")) |>
  gt::tab_footnote(pop_units_footnote, locations = gt::cells_column_spanners("unit_span")) |>
  gt::tab_footnote(pop_outcome_footnote, locations = gt::cells_column_spanners("outcome_span")) |>
  gt::tab_footnote(pop_treatment_footnote, locations = gt::cells_column_spanners("treatment_span")) |>
  gt::tab_footnote(pop_covariates_footnote, locations = gt::cells_column_spanners("covariates_span"))
```

### 5. Cleanup

```{r}
rm(p_tibble, d_tibble)
```

---

## Summary

The `make_p_tables()` function simplifies the creation of interpretable, spanner-labeled tables for modeling workflows. It promotes clarity, transparency, and rigor by encouraging authors to:

* Replace placeholders with meaningful values
* Use `"?"` or `"---"` for unknowns in pre/post data
* Fill in footnotes with useful context
* Ensure every table entry is surrounded by double quotes

This workflow supports better modeling documentation and instructional design.

For more on how and why to use these tables, see:

* [The Cardinal Virtues](https://ppbds.github.io/primer.tutorials/articles/cardinal_virtues.html#preceptor-table) article from *primer.tutorials*

#' Insert Preceptor and Population Table Templates in Quarto
#'
#' This function inserts a five-chunk Quarto-ready template for creating **Preceptor Tables** and **Population Tables**. These tables are designed to support causal and predictive modeling workflows by clearly labeling variables with spanners and encouraging thorough documentation via editable footnotes.
#'
#' The output includes:
#' - a tibble for the **Preceptor Table**
#' - a tibble for the **Population Table** (which includes Preceptor rows)
#' - `gt` code to display each table with labeled spanners
#' - editable footnotes for each section of the table
#' - cleanup code to remove temporary objects
#'
#' @description
#' These tables are meant to be self-contained and interpretable in isolation. Each table includes five spanner headers:
#'
#' - `"Unit"` (or `"Unit/Time"` in the Population Table)
#' - `"Outcome"` for predictive models, or `"Potential Outcomes"` for causal models
#' - `"Treatment"` (included only in causal models)
#' - `"Covariates"` — a set of user-specified labels (typically 3)
#'
#' The *labels* provided to this function are **not variable names from a dataset**, but rather **human-readable phrases** (e.g., `"Math Score if in Small Class"`). Long labels will be wrapped automatically when rendered using the `{gt}` package.
#'
#' The goal is to visually communicate which variables play which roles in your modeling. Each spanner groups columns of a shared type. Footnotes help document the rationale and context for each set of variables.
#'
#' NOTE: all table entries must be surrounded by double quotes, even numbers (Ex: "42").
#' 
#' Footnotes will appear under:
#' - the **table title** (background/motivation)
#' - the **Units** (unit/time range)
#' - the **Outcome(s)** (why this outcome is used)
#' - the **Treatment** (how it’s defined in the Preceptor vs. Population Table)
#' - the **Covariates** (why these were chosen and whether they differ across the two tables)
#'
#' The author is encouraged to fill in or delete these footnotes after the code is inserted. To **remove** a footnote, simply set it to `NULL`. This will hide the footnote from the rendered `gt` table.
#'
#' Preceptor and Population Tables are inserted together. The Population Table includes a `"Source"` column as its first column, which takes values `"Data"` or `"Preceptor Table"` depending on origin. This structure encourages comparison between expected and observed values.
#'
#' Behind the scenes, these tables are generated using `tibble::tribble()` for easier manual editing by row. This helps authors align values vertically and encourages clear visual structure in the Quarto document.
#'
#' @param is_causal Logical. If `TRUE`, generates a causal table with treatment and potential outcomes; if `FALSE`, generates a predictive table with one outcome and no treatment column.
#' @param unit_label Character. Label for the unit spanner (e.g., `"Student"` or `"Senator"`).
#' @param outcome_label Character. Label for the outcome spanner. Should be `"Outcome"` for predictive models, or `"Potential Outcomes"` for causal models.
#' @param treatment_label Character. Label for the treatment spanner. Required only if `is_causal = TRUE`.
#' @param covariate_1_label Character. Label for the first covariate.
#' @param covariate_2_label Character. Label for the second covariate.
#' @param covariate_3_label Character. Label for the third covariate.
#' @param pre_time Character. Default value used to populate the `"Time/Year"` column of the Preceptor Table. This helps authors indicate when expectations were formed.
#' 
#' @note
#'
#' Required packages:
#' This function depends on the following packages:
#' - `gt`: for rendering the tables
#' - `tibble`: for creating the data structure
#' - `glue`: for dynamically constructing column names and labels
#'
#' You can install them if not already installed:
#' ```r
#' install.packages(c("gt", "tibble", "glue"))
#' ```

#' @return This function inserts R code chunks directly into your currently open Quarto document, using `rstudioapi::insertText()`. The chunks include tibbles, `gt` rendering code, editable footnotes, and cleanup.
#'
#' @note
#' - No default values are provided for labels, other than `NULL`. If a required argument is not supplied, the function will return an error.
#' - The code chunk environments are self-contained and designed to avoid variable conflicts in the surrounding document.
#' - Labels should be kept concise but human-readable. If necessary, abbreviate.
#'
#' @importFrom glue glue
#' @importFrom tibble tribble
#' @importFrom gt gt tab_spanner tab_header cols_align fmt_markdown tab_footnote cells_title cells_column_spanners
#'
#' @examples
#' \dontrun{
#' make_p_tables(
#'   is_causal = TRUE,
#'   unit_label = "Senator",
#'   outcome_label = "Potential Outcomes",
#'   treatment_label = "Phone Call",
#'   covariate_1_label = "Sex",
#'   covariate_2_label = "Age",
#'   covariate_3_label = "Incumbency",
#'   pre_time = "2022"
#' )
#' }
#' 
#'@examples
#' Example output (Preceptor and Population Tables):
#'
#' \figure{Screenshot-2025-08-06-181554.png}{options: width=80%}
#' \figure{Screenshot-2025-08-06-181621.png}{options: width=80%}
#'
#' The images above show a sample Preceptor Table and Population Table generated by this function.
#' 
#' @export

